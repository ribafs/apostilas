PHP nasceu como uma linguagem dinâmica e fracamente tipada e passou a ter melhorias em relação à tipos com a sua evolução. 

No início ele aceitava somente typehints de classes e interfaces em argumentos de métodos. Depois, com o lançamento do PHP 7, passou-se a ter suporte a typehints de tips escalares como string, int, float e bool, tipos para retorno de métodos e opção de tipagem estrita com `declare(strict_types=1)`.

No PHP 7.1 passou-se a suportar tipos nullable, ou seja, se a variável aceita nulo ou não e aos tipos void e iterable. E no PHP 7.2 o suporte ao tipo object. 

Contudo, o PHP ainda não tinha suporte para tipos em propriedades. Ela quase foi incluída na versão 7.3, mas a equipe de desenvolvimento do core do PHP decidiu incluir com calma e deixaram para o PHP 7.4.

Anteriormente a isso utilizava-se uma annotation em docblock (@var EntityManagerInterface) para sinalizar que determinada propriedade era de um tipo específico. Isso auxiliava IDEs no seu autocomplete e ferramentas de análise estática.

Novidades do PHP 7

Algumas novidades

Referências
https://tableless.com.br/10-novidades-do-php-7/
https://www.treinaweb.com.br/blog/php-7-e-novidades-do-php-7-1/
https://www.php.net/manual/en/migration70.new-features.php
https://github.com/tpunt/PHP7-Reference
https://devzone.zend.com/4693/php-7-glance/
https://blog.digitalocean.com/getting-ready-for-php-7/
https://www.treinaweb.com.br/blog/novidades-do-php-7-2/
https://imasters.com.br/back-end/php-7-2-quais-sao-as-novidades-da-nova-versao-do-php
https://imasters.com.br/back-end/php-7-3-e-php-8-o-que-esperar-das-proximas-versoes


Novidades do PHP 7.1
    • Nullable Types (possibilidade de um parâmetro receber um tipo específico ou null) 
    • Habilidade de pegar múltiplas exceções num mesmo bloco catch 
    • Criação de um pseudo-tipo chamado Iterable 
    • Habilidade de definir visibilidade para constantes de classes (public, private, protected) 
    • Diversas melhorias à extensão Curl, dentre elas, suporte a HTTP/2 Server Push. 
    • Tipo void para parâmetros e retornos de funções/métodos. 
    • Incrementos na utilização list() 
    • O suporte a mcrypt() foi removido da linguagem (tornou-se defasado devido à implementações mais atualizadas e seguras que hoje temos à disposição). 

Capturando múltiplas exceções
Antes a única opção era:
try {
    // todo
} catch (MyException1 $e) {
    // todo
} catch (MyException2 $e) {
    // todo
} catch (Exception $e) {
    // todo
}

No PHP 7.1 é possível agrupar mais de uma exceção num mesmo bloco catch:
try {
    // todo
} catch (MyException1 | MyException2 $e) {
    // todo
} catch (Exception $e) {
    // todo
}

Void return
Na 7.1 é possível retornar void como sendo um tipo de retorno válido.
Exemplo:
class Squirtle extends Pokemon
{
    public function run() : void
    {
        // todo
    }
}

Funções removidas

As funções de acesso a bancos de dados mysql_* (mysql_connect(), mysql_query() entre outras) foram removidas na versão 7. A recomendação agora é usar o PDO.

Funções ereg_* foram removidas. Agora devemos usar uma função preg_*, como preg_match ou preg_replace.

Erros Fatais e Exceções
No PHP 7, erros fatais passaram a ser Exceções. Isso quer dizer que eles podem ser tratados em bloco try/catch, sem interromper a execução do script.

Construtores do PHP 4 continuará sendo possível mas recomendando o __construct();

Definir tipo de retorno para funções:

function nomeFuncao() : tipo
{
    // corpo da função
}

Por exemplo:
function soma($x, $y) : float
{
    return $x + $y + 1.5;
}

Criação de classes anônimas

function createObject()
{
    return new class{
        public function test()
        {
            echo "test" . PHP_EOL;
        }
    };
}

$obj = createObject();
$obj->test();


Abaixo algumas das funcionalidades que se tornarão obsoletas no 7.2:
    • __autoload 
    • $php_errormsg 
    • create_function() 
    • func_overload 
    • (unset) cast 
    • parse_str() without second argument 
    • gmp_random() 
    • each() 
    • assert() with string argument 
    • $errcontext argument of error handler 

Principais novidades que entrarão no PHP 7.2. Algumas das principais:
    • get_class() desabilita o parâmetro nulo 
    • Impedir number_format() de retornar zero negativo 
    • Argon2 Password Hash 
    • Object typehint 
    • libsodium 

Argon2 Password Hash
Argon2 é o algoritmo de hashing de senha vencedor do concurso “Password Hashing Competition” de 2015, sendo assim muito bem recomendado a sua utilização. Ao contrário do Bcrypt, que apenas possui um único fator de custo, o Argon2 é parametrizado por três fatores distintos:
    1. Tempo de execução 
    2. Memória necessária 
    3. Grau de paralelismo 

A função password_hash() é alterada para aceitar PASSWORD_ARGON2I como o algoritmo e aceitar o custo da memória, o custo do tempo e o grau de paralelismo como opções. O exemplo a seguir ilustram a nova funcionalidade:
// Argon2i com fatores de custo padrão
password_hash('password', PASSWORD_ARGON2I);
 
// Argon2i com fatores de custo personalizados
password_hash('password', PASSWORD_ARGON2I, ['memory_cost' => 1<<17, 'time_cost' => 4, 'threads' => 2]);

A primeira linguagem de programação a adotar criptografia moderna
Outra novidade que veio na versão 7.2 é referente à criptografia moderna, libsodium, que é parte da extensão principal do PHP 7.2.  Sodium é uma biblioteca que facilita a utilização de criptografia, descriptografia, assinaturas, hash de senha e muito mais. Seu objetivo é fornecer todas as operações básicas necessárias para criar ferramentas criptográficas de alto nível.

O PHP continua sendo a linguagem mais popular do lado do servidor para criar sistemas. Com uma participação de mercado estimada em 80%, a linguagem de programação de vinte e poucos anos está em toda parte.


O que se tornará obsoleto no PHP 7.3?
Abaixo, algumas das funcionalidades que se tornarão obsoletas:
    • Extensão WDDX; 
    • Alias de função mbstring usando um prefixo mb_ (por exemplo, mb_ereg); 
    • mb_detect_encoding() sem strict mode; 
    • Funções strip_tags() e fgetss(); 
    • Função image2wbmp. 

Principais novidades que entrarão no PHP 7.3
    • Flexibilidade de sintaxe Heredoc e Nowdoc; 
    • Permitir vírgula à direita em chamadas de função e método; 
    • Opção para fazer json_encode e json_decode lançar exceções em erros; 
    • Atribuições de referências em list(); 
    • Função is_countable(). 

Novidades sobre o PHP 7.3
https://imasters.com.br/php/php-7-3-conheca-as-novidades-desta-versao



Novidades do PHP 7.4

Poderemos declarar tipos estáticos para variáveis

class User
{
    public int $id;
    public string $nome;
    private bool $isAdmin = false;
}

Operador null coalescing

/ $data['name'] = 'John';

// verifica se a variável foi definida e não é nula utilizando o operador null coalesce
$name = $data['name'] ?? 'anonymous';
echo $name; // anonymous


Uma novidade muito forte e muito comentada foi a melhora no desempenho (teve seu motor remodelado), que alguns testes chegou a um ganho de 9 vezes.
Veja aqui - https://rberaldo.com.br/php-7-9-vezes-mais-rapido-que-php-5-6/


https://kinsta.com/pt/blog/php-8/

Union types

Para que o processamento seja exigente e lance mensagens de tipos errados precisamos usar na primeira linha

declare(strict_types=1);

public function foo(Foo|Bar $input): int|float;

class Number {
    private int|float $number;
 
    public function setNumber(int|float $number): void {
        $this->number = $number;
    }
 
    public function getNumber(): int|float {
        return $this->number;
    }
}

function myFunction(int|float $number): int
{
  return round($number);
}

function atualizarEstoque(int | float $quantidade) 
{
  if ($quantidade > 0) {
     $this->estoque += $quantidade;
  }
}

private int|float $numero;

public function foo(Foo|null $foo): void;

No entanto, com o PHP 8.0, eles permitem que você escreva usando argumentos, propriedades e valores de retorno mistos para representar vários desses valores:

    array
    bool
    callable
    int
    float
    null
    object
    resource
    string

mixed is equivalent to the union type array|bool|callable|int|float |object|resource|string|null . Available as of PHP 8.0.0. 

Falando de tipos no PHP 8

Ao in vés de usar
union type array|bool|callable|int|float|object|resource|string|null

Agora podemos usar algo equivalente e que simplifica:
mixed


mixed - permitir qualquer tipo

mixed indica que um parâmetro pode aceitar vários (mas não necessariamente todos) os tipos.

gettype(), por exemplo, aceita todos os tipos do PHP, enquanto que a função str_replace() aceita somente strings e arrays.

Podemos usar o mixed em qualquer lugar que usamos tipos: propriedades, parâmetros, retorno


class Example {
    public mixed $exampleProperty;
    public function foo(mixed $foo): mixed {}
}

function foo(mixed|null $foo) {}
function foo(?mixed $foo) {}
function foo($foo): mixed|null {}
function foo($foo): ?mixed {}

public function handle(mixed $request): mixed
{
    // processing request

    return $next($request);
}

function mangleUsers(string|array $users): array
{
    If (is_string($users)) {
        $users = [$users];
    }
    // ...
}

class CloudAttribute {
 
    protected string $value;
 
    public function __construct(string $value) {
        $this ->value = $value;
    }
 
    public function getValue() : string {
        return $this -> value;
    }
 
}

Match expression

Match é uma nova expressão semelhante ao switch e conta com novos recursos. Por ser uma expressão, isso significa que ela conta com a capacidade de retornar valores ou armazená-los em uma variável.

Match suporta apenas expressões de uma linha e não precisa de uma declaração break. Além disso, o Match faz comparações estritas.

$result = match (1.0) {
    1.0 => "Float!",
    "foo", "bar" => "foobar!"
};

Falando de tipos no PHP 8

union type - podemos usar um ou até todos os tipos existentes
mixed - aceita qualquer tipo existente

Exemplos

function mista($nr ): int
{
    return $nr*2;
}

print mista(3.25); // Se amarrarmos em int, retorna apenas 6

function mista($nr ): int|float
{
    return $nr*2;
}

print mista(3.25);// O union type, aceita tanto o float quanto o int

function mista($nr ): mixed
{
    return $nr*2;
}

print mista(3.25); // O mixed funciona como o union type mas simplifica

function mista($nr ): mixed
{
    return $nr*2;
}

print mista('3.5'); // O mixed funciona como qualquer tipo, em nosso caso inclusive com string

function mista(int|float $nr): int|float
{
    return $nr*2;
}

print mista('3.5');  // Aqui ele aceita também e retorna 7, mesmo que euu tenha dito para retornar int ou float ele aceita string. Parece que tem efeito apenas de documentação e não amarra por tipos de forma exigente



Mudanças no método Construtor

Se tratando de sintaxe, uma grande mudança que será proveitosa tanto para desenvolvedores iniciantes quanto para quem já utiliza o PHP a mais tempo é as mudanças no método construtor.

Na programação Orientada a Objetos, o método construtor é um dos mais importantes para uma classe. Portanto, o PHP 8 se propõe a simplifica-lo.

Vamos utilizar como exemplo a criação de uma classe “Pessoa”. Dentro dessa classe, armazenaremos informações de nome, idade e altura. Atualmente, no php 7.4, você precisa fazer o código como no exemplo abaixo:

class pessoa{
    public string $nome;
    public int $idade;
    public float $altura;

    public function __construct(
        string $nome,
        int $idade,
        float $altura
    ){
        $this->nome= $nome;
        $this->idade= $idade;
        $this->altura= $altura;
    }
}

Se você observar bem, perceberá que você precisou repetir o nome dos atributos três vezes. Portanto, isso acaba tornando o código “redundante”. Pensando nisso, no PHP 8, com método contrutor você conseguirá reescrever a mesma classe conforme o exemplo abaixo:

class Person {

    public function __construct(
        public string $name,
        public int $age,
        public float $height
    ) {

 

    }

}

Observe que, agora, você poderá escrever a mesma classe porém com bem menos linhas de código. Além disso, torna o código mais simples de se ler e entender. Portanto, as mudanças do método construtor do PHP 8 serão muito interessante para os desenvolvedores.

Porém, é importante que você saiba que essa funcionalidade possuirá algumas exceções. Você apenas conseguirá utilizar esse recurso em métodos construtores para classes não abstratas. Portanto, para entender melhor esse assunto, recomendamos que você leia a RFC sobre a modificação do método construtor.



Novas Funções no PHP 8

Para finalizarmos nossa lista, não podemos deixar de comentar sobre três novas funções que serão acrescentadas ao PHP. São elas:

    str_contains
    str_starts_with() e str_ends_with()
    get_debug_type

A função str_contains

A nova função str_contains permite realizar uma busca dentro de uma string.

Sua síntaxe será como no exemplo abaixo:

str_contains ( string $haystack , string $needle ) : bool

Esta sintaxe significa que será executado uma verificação para indicar se $needle está presente dentro da string $haystack. Caso sim, ela retornará o valor booleano true. Caso não esteja, então, retornará false.

Portanto, agora podemos utilizar a função str_contains para escrever o código como no exemplo abaixo:

$string = 'Frase de exemplo';
$verificar= 'exemplo';

if (str_contains($string, $verificar)) {
	echo "A String foi encontrada";
} else {
	echo "A String não foi encontrada";
}

Como você pode perceber, isso tornará a busca dentro de uma string mais legível e menos propenso a erros.

Você pode estar lendo a RFC sobre essa função para poder verificar todas suas características.
As funções str_starts_with() e str_ends_with()

As funções str_starts_with() e str_ends_with() funcionam parecidos com a função anterior, a str_contains. Porém, a diferença é que elas verificam se um string começa ou termina com determinada string.

Sua similaridade com str_contains também se dá pela sintaxe. Veja nos códigos de exemplo abaixo a sintaxe da str_starts_with() e str_ends_with():

str_starts_with (string $haystack , string $needle) : bool
str_ends_with (string $haystack , string $needle) : bool

Portanto, quando você utilizar essa funções, será possível economizar no uso da CPU. Isso acontece pois não será necessário percorrer por toda uma string, a função irá verificar apenas o inicio ou o final.
A função get_debug_type

A nova função que chegará junto ao PHP 8 é a get_debug_type. Com ela, você poderá retornar o tipo de dado de uma variável.

Portanto, você pode perceber que ela é bem parecida com a função já existente gettype(). Porém, a get_debug_type() representa uma melhoria para o PHP, pois ela consegue retornar a verificação de tipo.

Você pode ver na própria RFC as principais diferenças de retornos entre as funções get_debug_type() e gettype()

https://www.homehost.com.br/blog/tutoriais/php/php-8/

Ajustes na concatenação de strings e números

Iremos falar de um dos primeiros conceitos que aprendemos quando estudamos PHP e também um dos conceitos que pode nos causar muita dor de cabeça: a concatenação. Sabemos que o PHP é uma linguagem fracamente tipada e tenta converter números em strings quando usamos o operador . (ponto) em nosso código. Contudo, isso pode nos causar alguns problemas. Vamos ver um exemplo.

Vamos criar duas variáveis numéricas, realizar a soma delas e então exibir o resultado no navegador. Podemos fazer isso por meio do seguinte código:

$number1 = 10;
$number2 = 15;

echo "Resultado: " . $number1 + $number2;

Quando testamos esse código vemos o seguinte resultado:
Resultado de nosso código PHP no navegador

O resultado está incorreto e um Warning foi retornado. Isso ocorre pois o PHP tentou concatenar a string “Resultado” com o número 10, o que não deu certo. O responsável por fazer com que a conta fosse desconsiderada e a concatenação ocorresse é o que chamamos de precedência de operadores. Ele define a prioridade dos operadores no código. Talvez você lembre desse conceito nas aulas de expressões matemáticas na escola.

Atualmente o operador de concatenação (.) tem uma precedência superior em relação ao operador de soma (+). Para resolver o problema acima, precisaríamos isolar a conta na expressão usando parênteses, da seguinte forma:

echo "Resultado: " . ($number1 + $number2);

Entretanto, pode ser que esqueçamos disso e continuemos tendo o mesmo erro. Pensando em resolver essa pedra no sapato, foi proposto que na versão 8 do PHP o operador de concatenação tenha uma precedência inferior aos operadores aritméticos, e felizmente essa proposta foi aceita. Assim, se executarmos o código inicial usando o PHP 8, veremos o seguinte resultado:
Resultado de nosso código no navegador

Perfeito! A operação foi realizada e a string “Resultado” foi exibida.
https://hcode.com.br/blog/o-que-ha-de-novo-no-php-8-parte-1


Argumentos Nomeados

Agora, com o PHP 8 podemos passar argumentos para uma função em ordem diferente do que foi definido na função, usando nomes.

Quando trabalhamos com funções ou métodos, sempre ouvimos falar de argumentos ou parâmetros. E sabemos que a ordem que informamos esses valores pode fazer toda a diferença no bom funcionamento do código.

A linguagem PHP sempre possuiu argumentos referenciados por meio de sua posição. Mas com a versão 8, isso mudou. Agora possuímos argumentos nomeados. Isso significa que podemos deixar claro qual argumento os valores se referem. Vamos ver um exemplo disso.

Vamos criar uma função que irá retornar um array dos dados informados:

function create_user($username = "admin", $password = "admin", $is_admin = true) {
	$data = [
		'username' => $username,
		'password' => $password,
		'admin' => $is_admin
	];
	return $data;
}

Note que essa função possui um valor padrão para todos os argumentos. Imagine que desejamos realizar a chamada dessa função, mas informando apenas o argumento $password. Para fazer isso, basta informar para a função o nome do argumento sem o sinal de $, definir um sinal de : (dois-pontos) e então informar seu valor:

print_r(create_user(password: '123456'));

Esse código definirá o seguinte resultado:
Resultado de nossa função no navegador

Perceba que a informação de senha foi identificada corretamente, mas os outros dois parâmetros receberam seus valores padrão. Por meio dos argumentos nomeados também podemos informar os argumentos na ordem que desejarmos; não precisamos mais ficar presos à ordem que foi definida na função. Por exemplo, se desejarmos informar o terceiro argumento e depois o primeiro, não tem problema:

print_r(create_user(is_admin: 0, username: 'support'));

O resultado desse código será o seguinte:
Resultado de nossa função no navegador

Os dados também são reconhecidos. Impressionante, não é mesmo?

Esse mesmo padrão pode ser usado em funções nativas do PHP. Podemos ver um exemplo disso com a função array_fill(), que é usada para criar um array personalizado com os valores que determinamos. Ele espera três parâmetros: 1) start_index, que representa o índice inicial do nosso array; 2) count, que representa a quantidade de itens que o array possuirá; e 3) value, que é o valor dos itens. Se desejarmos usar os argumentos nomeados com esta função, podemos usar o seguinte código:

print_r(array_fill(value: 'Hcode', start_index: 0, count: 10));

O resultado será o seguinte:
Array gerado pela função array_fill()

Nosso array foi criado com sucesso
https://hcode.com.br/blog/o-que-ha-de-novo-no-php-8-parte-3


Novidades do PHP 7

Estas novidades afetam tanto o interpretador quanto várias extensões e bibliotecas

Algumas:

- Scalar type hint:
string: String
integer: Números inteiros
float: Números em ponto flutuante
bool: Valores boleanos: true ou false

Podemos forçar o interpretador a exigir declaração de tipos ou não inserindo no início do arquivo:

declare(strict_types=0); //evitar type-checking
declare(strict_types=1); // strict type-checking

Exemplo de funções com parêmetros declarando tipos

function hint (int $A, float $B, string $C, bool $D)
{
    var_dump($A, $B, $C, $D);
}

Para declarar tipos de retorno de funções:

function divide(int $A, int $B) : int
{
    return $A / $B;
}

Outra novidade do PHP 7 foi a adição de classes anônimas

$object = new class {
    public function hello($message) {
        return "Hello $message";
    }
};

echo$object->hello('PHP');

$helper->sayHello(new class {
    public function hello($message) {
        return "Hello $message";
    }
});

Operador Coalesce

$role = $_GET['role'] ??'guest';

$A = null; // or not set
$B = 10;

echo $A ?? 20; // 20
echo $A ?? $B ?? 30; // 10

Operador spaceship

operator<=> equivalent
$a < $b($a <=> $b) === -1
$a <= $b($a <=> $b) === -1 || ($a <=> $b) === 0
$a == $b($a <=> $b) === 0
$a != $b($a <=> $b) !== 0
$a >= $b($a <=> $b) === 1 || ($a <=> $b) === 0
$a > $b($a <=> $b) === 1

Função de divisão de inteiros

int intdiv(int $dividend, int $divisor)

Let's take a look at the following few examples:
intdiv(5, 3); // int(1)
intdiv(-5, 3); // int(-1)
intdiv(5, -2); // int(-2)
intdiv(-5, -2); // int(2)
intdiv(PHP_INT_MAX, PHP_INT_MAX); // int(1)
intdiv(PHP_INT_MIN, PHP_INT_MIN); // int(1)

// following two throw error
intdiv(PHP_INT_MIN, -1); // ArithmeticError
intdiv(1, 0); // DivisionByZeroError

Constante tipo array

// the define() example
define('FRAMEWORK', [
'version' => 1.2,
'licence' =>'enterprise'
]);

echo FRAMEWORK['version']; // 1.2
echo FRAMEWORK['licence']; // enterprise

// the class const example
class App {
const FRAMEWORK = [
'version' => 1.2,
'licence' =>'enterprise'
];
}
echo App::FRAMEWORK['version']; // 1.2
echo App::FRAMEWORK['licence']; // enterprise

Algumas que fram abandonadas/deprecateds

The following functions are no longer available for use:
ereg_replace
ereg
eregi_replace
eregi
split
spliti
sql_regcase

As tags tipo ASP e tipo JavaScript não são mais aceitas

The PHP script and ASP tags are no longer available:

<!-- PHP script tag example -->
<script language="php">
// Code here
</script>

<!-- PHP ASP tag example -->
<%
// Code here
%>
<%=$varToEcho; %>

E muitas outras novidades foram introduzidas. Vide capítulo 1 do livro
Modular Programming with PHP 7 da PacketPub

