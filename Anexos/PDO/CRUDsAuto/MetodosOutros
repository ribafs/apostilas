    /**
     * Charset to use when connecting to database
     *
     * @param string $charset Charset to use. Default: `utf8`
     *
     * @return object $this
     */
    public function charset($charset = 'utf8')
    {
        $this->charset = $this->validateString($charset, 'charset');

        return $this;
    }

    /**
     * Fetch the query result(s)
     *
     * @param int $type Type of results to return. Default: `\PDO::FETCH_ASSOC`.
     *
     * @return mixed Query results in the desired type
     */
    public function fetch($type = PDO::FETCH_ASSOC)
    {
        $db = $this->db->prepare($this->action);
        $db->execute($this->bind[0]);
        $this->action = null;
        $this->result = $db->fetch($type);

        return $this->result;
    }

    /**
     * Fetch all of the query result(s)
     *
     * @param int $type Type of results to return. Default: `\PDO::FETCH_ASSOC`.
     *
     * @return mixed Query results in the desired type
     */
    public function fetchAll($type = PDO::FETCH_ASSOC)
    {
        $db = $this->db->prepare($this->action);
        $db->execute($this->bind[0]);
        $this->action = null;
        $this->result = $db->fetchAll($type);

        return $this->result;
    }

    /**
     * Table to insert the data into
     *
     * @param string $table Name of table
     *
     * @return object $this
     */
    public function insert($table)
    {
        $table        = $this->validateString($table, '`INSERT` table name');
        $this->action .= ' INSERT INTO '.$table;

        return $this;
    }

    /**
     * Columns to use in query
     *
     * @param string ...$columns Comma-delimited list of columns
     *
     * @return object $this
     */
    public function columns(...$columns)
    {
        $columns      = implode(',', $columns);
        $columns      = $this->validateString($columns, 'Column statement');
        $this->action .= ' ('.$columns.')';

        return $this;
    }

    /**
     * Values to place into table
     *
     * @param mixed ...$values Comma-delimited list of values
     *
     * @return object $this
     */
    public function values(...$values)
    {
        $values       = implode(',', $values);
        $values       = $this->validateString($values, 'Values statement', true);
        $this->action .= ' VALUES ('.$values.')';

        return $this;
    }

    /**
     * Update values in a table
     *
     * @param string $table Table to update
     *
     * @return object $this
     */
    public function update($table)
    {
        $table        = $this->validateString($table, '`UPDATE` table name');
        $this->action .= ' UPDATE '.$table;

        return $this;
    }

    /**
     * Delete row(s) from table
     *
     * @param string $table Table name to delete row(s) from
     *
     * @return object $this
     */
    public function delete($table)
    {
        $table        = $this->validateString($table, '`DELETE FROM` table name');
        $this->action .= ' DELETE FROM '.$table;

        return $this;
    }

    /**
     * Character set to use for the query
     *
     * @param string $characterSet Character set to use for the query
     *
     * @return object $this
     */
    public function characterSet($characterSet)
    {
        $this->validateString($characterSet, 'Character set');
        $this->action .= ' CHARACTER SET '.$characterSet;

        return $this;
    }

    /**
     * Truncate a table
     *
     * @param string $table Table to truncate
     */
    public function truncate($table)
    {
        $table        = $this->validateString($table, '`TRUNCATE` table name');
        $this->action .= 'TRUNCATE TABLE '.$table;
        $this->execute();
    }

    /**
     * Validate the string
     *
     * @param string $string    String to validate
     * @param string $message   Message to return if an exception is thrown
     * @param bool   $allowNull Whether or not to allow a `null` string. Default: `false`
     *
     * @return string|null String if valid, `null` otherwise
     *
     * @throws RuntimeException if `$string` is not a string
     */
    private function validateString($string, $message, $allowNull = false)
    {
        if (is_string($string)) {
            return $string;
        }

        if ($allowNull === true) {
            return null;
        }

        throw new RuntimeException("$message must be a string.");
    }

	public function insert( $table_name, $fields = [] )
	{
		$this->resetQuery();

		$keys = implode('`, `', array_keys($fields));
		$values = '';
		$x=1;
		foreach ($fields as $field => $value) {
			$values .='?';
			$this->bindValues[] =  $value;
			if ($x < count($fields)) {
				$values .=', ';
			}
			$x++;
		}
 
		$this->sql = "INSERT INTO `{$table_name}` (`{$keys}`) VALUES ({$values})";
		$this->getSQL = $this->sql;
		$stmt = $this->dbh->prepare($this->sql);
		$stmt->execute($this->bindValues);
		$this->lastIDInserted = $this->dbh->lastInsertId();

		return $this->lastIDInserted;
	}//End insert function

	public function select($columns)
	{
		$columns = explode(',', $columns);
		foreach ($columns as $key => $column) {
			$columns[$key] = trim($column);
		}
		
		$columns = implode('`, `', $columns);
		

		$this->columns = "`{$columns}`";
		return $this;
	}

	public function limit($limit, $offset=null)
	{
		if ($offset ==null ) {
			$this->limit = " LIMIT {$limit}";
		}else{
			$this->limit = " LIMIT {$limit} OFFSET {$offset}";
		}

		return $this;
	}

	/**
	 * Sort result in a particular order according to a column name
	 * @param  string $field_name The column name which you want to order the result according to.
	 * @param  string $order      it determins in which order you wanna view your results whether 'ASC' or 'DESC'.
	 * @return object             it returns DB object
	 */
	public function orderBy($field_name, $order = 'ASC')
	{
		$field_name = trim($field_name);

		$order =  trim(strtoupper($order));

		// validate it's not empty and have a proper valuse
		if ($field_name !== null && ($order == 'ASC' || $order == 'DESC')) {
			if ($this->orderBy ==null ) {
				$this->orderBy = " ORDER BY $field_name $order";
			}else{
				$this->orderBy .= ", $field_name $order";
			}
			
		}

		return $this;
	}

    public function insert($table, $data)
    {
        //add columns into comma seperated string
        $columns = implode(',', array_keys($data));

        //get values
        $values = array_values($data);

        $placeholders = array_map(function ($val) {
            return '?';
        }, array_keys($data));

        //convert array into comma seperated string
        $placeholders = implode(',', array_values($placeholders));

        $this->run("INSERT INTO $table ($columns) VALUES ($placeholders)", $values);

        return $this->lastInsertId();
    }

    /**
     * update record
     * 
     * @param  string $table table name
     * @param  array $data  array of columns and values
     * @param  array $where array of columns and values
     */
    public function update($table, $data, $where)
    {
        //merge data and where together
        $collection = array_merge($data, $where);

        //collect the values from collection
        $values = array_values($collection);

        //setup fields
        $fieldDetails = null;
        foreach ($data as $key => $value) {
            $fieldDetails .= "$key = ?,";
        }
        $fieldDetails = rtrim($fieldDetails, ',');

        //setup where 
        $whereDetails = null;
        $i = 0;
        foreach ($where as $key => $value) {
            $whereDetails .= $i == 0 ? "$key = ?" : " AND $key = ?";
            $i++;
        }

        $stmt = $this->run("UPDATE $table SET $fieldDetails WHERE $whereDetails", $values);

        return $stmt->rowCount();
    }

    /**
     * Delete records
     * 
     * @param  string $table table name
     * @param  array $where array of columns and values
     * @param  integer $limit limit number of records
     */
    public function delete($table, $where, $limit = 1)
    {
        //collect the values from collection
        $values = array_values($where);

        //setup where 
        $whereDetails = null;
        $i = 0;
        foreach ($where as $key => $value) {
            $whereDetails .= $i == 0 ? "$key = ?" : " AND $key = ?";
            $i++;
        }

        //if limit is a number use a limit on the query
        if (is_numeric($limit)) {
            $limit = "LIMIT $limit";
        }

        $stmt = $this->run("DELETE FROM $table WHERE $whereDetails $limit", $values);

        return $stmt->rowCount();
    }

    /**
     * Delete all records records
     * 
     * @param  string $table table name
     */
    public function deleteAll($table)
    {
        $stmt = $this->run("DELETE FROM $table");

        return $stmt->rowCount();
    }

    /**
     * Delete record by id
     * 
     * @param  string $table table name
     * @param  integer $id id of record
     */
    public function deleteById($table, $id)
    {
        $stmt = $this->run("DELETE FROM $table WHERE id = ?", [$id]);

        return $stmt->rowCount();
    }

    /**
     * Delete record by ids
     * 
     * @param  string $table table name
     * @param  string $column name of column
     * @param  string $ids ids of records
     */
    public function deleteByIds(string $table, string $column, string $ids)
    {
        $stmt = $this->run("DELETE FROM $table WHERE $column IN ($ids)");

        return $stmt->rowCount();
    }

